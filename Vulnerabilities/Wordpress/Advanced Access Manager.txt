Advanced Access Manager allows fine-grained access control, and has the capability to assign multiple roles to a single user. If the “Multiple Roles Support” setting is enabled, the plugin is vulnerable to authenticated authorization bypass and, in some cases, privilege escalation.

A low-privileged user could assign themselves or switch to any role with an equal or lesser user level, or any role that did not have an assigned user level. This could be done by sending a POST request to wp-admin/profile.php with typical profile update parameters and appending a aam_user_roles[] parameter set to the role they would like to use.

The reason this worked is that the AAM_Backend_Manager::profileUpdate method that actually assigns these roles is triggered by the profile_update and user_register actions, and failed to use a standard capability check.



add_action('profile_update', array($this, 'profileUpdate'), 10, 2);
add_action('user_register', array($this, 'profileUpdate'), 10, 2);



public function profileUpdate($id)
{
    $user = get_user_by('ID', $id);
 
    //save selected user roles
    if (AAM::api()->getConfig('core.settings.multiSubject', false)) {
        $roles = filter_input(
            INPUT_POST,
            'aam_user_roles',
            FILTER_DEFAULT,
            FILTER_REQUIRE_ARRAY
        );
 
        // let's make sure that the list of roles is array
 
        $roles = (is_array($roles) ? $roles : array());
        $okroles=array_keys(get_editable_roles());
 
        // prepare the final list of roles that needs to be set
        $newRoles = array_intersect($roles, array_keys(get_editable_roles()));
 
        if (!empty($newRoles)) {
            //remove all current roles and then set new
            $user->set_role('');
 
            foreach ($newRoles as $role) {
                $user->add_role($role);
            }
        }
    }
}
This meant that, if the ‘Multiple Roles Support’ setting was enabled, any user would trigger this method when updating their profile. The profileUpdate function would then check to see if any roles were present in the aam_user_roles[] POST parameter. If roles were present, it then used the WordPress get_editable_roles function to determine whether the user was allowed to add a given role, and if so, granted the user that role without performing any other form of capability check.

By default, get_editable_roles returns all registered roles. However, the Advanced Access Manager plugin added a filter to limit these roles in the AAM_Service_UserLevelFilter::filterRoles method. This method looped through each registered role and determined the role’s user level using the AAM_Core_API::maxLevel method.


public function filterRoles($roles)
{
    static $levels = array(); // to speed-up the execution
 
    foreach ($roles as $id => $role) {
        if (!empty($role['capabilities']) && is_array($role['capabilities'])) {
            if (!isset($levels[$id])) {
                $levels[$id] = AAM_Core_API::maxLevel($role['capabilities']);
            }
 
            if (!$this->isUserLevelAllowed(true, $levels[$id])) {
                unset($roles[$id]);
            }
        }
    }
 
    return $roles;
}
AAM_Service_UserLevelFilter::filterRoles then removed any roles with a higher user level than the current user from the list of roles the current user was allowed to choose. By default, this worked reasonably well; all built-in roles have a built-in user-level attribute. Unfortunately, however, the user-level attribute was deprecated in WordPress 3.0.

This meant that if a role did not have a user-level attribute, or had a user-level attribute equal to or lesser than the logged-in user, the logged-in user could assign themselves to that role.

This was a problem in 3 possible scenarios:

Plugins with custom roles. There are several thousand plugins that add custom roles in the WordPress plugin repository, and most of these plugins do not assign a user-level attribute to these roles. For a few real-world examples, a backup plugin could add a role that is allowed to restore arbitrary files, including malicious code or database modifications, or an educational plugin might add an instructor role with the ability to insert unfiltered html and embed malicious JavaScript into the site.
Roles without an assigned user level. If a role was created from scratch in Advanced Access Manager, but not assigned a user level, any user with subscriber-level access could switch to that role.
Cloned user roles. If a role was cloned from an existing role (for instance, a contributor or author) and assigned additional capabilities, any user in the original role could switch to or assign themselves to the new role.
In any one of these scenarios, a low-privileged attacker could potentially switch to a role that allowed them to either directly take over a site or could be used as part of an exploit chain, depending on which roles were configured.


References:
wordfence.com
dailycve.com
